{"ast":null,"code":"var _jsxFileName = \"/Users/khanglethanh/fullstack_open/part1/unicafe/src/index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistics = props => {\n  if (props.allClicks.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 7\n      }\n    }, \"No feedback given\");\n  }\n\n  console.log(props.allClicks);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  }, \"button press history: \", props.allClicks.join(' '));\n};\n\nconst Button = ({\n  onClick,\n  text\n}) => /*#__PURE__*/React.createElement(\"button\", {\n  onClick: onClick,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 3\n  }\n}, text);\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [allClicks, setAll] = useState([]);\n\n  const handleGoodClick = () => {\n    setAll(allClicks.concat(setGood(good + 1)));\n    setGood(good + 1);\n  };\n\n  const handleNeutralClick = () => {\n    setAll(allClicks.concat(neutral));\n    setNeutral(neutral + 1);\n  };\n\n  const handleBadClick = () => {\n    setAll(allClicks.concat(bad));\n    setBad(bad + 1);\n  };\n\n  let total = good + neutral + bad;\n  let average = (good * 1 + neutral * 0 + bad * -1) / total;\n  let positive = good / total * 100;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, \"Give feedback\"), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleGoodClick,\n    text: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleNeutralClick,\n    text: \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: handleBadClick,\n    text: \"bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"statistics\"), /*#__PURE__*/React.createElement(Statistics, {\n    allClicks: allClicks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"good \", good, \"  \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"neutral \", neutral, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \"bad \", bad, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, \"all  \", total), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, \"average  \", average, \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"positive  \", positive, \"% \")));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/khanglethanh/fullstack_open/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Statistics","props","allClicks","length","console","log","join","Button","onClick","text","App","good","setGood","neutral","setNeutral","bad","setBad","setAll","handleGoodClick","concat","handleNeutralClick","handleBadClick","total","average","positive","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nconst Statistics = (props) => {\n  if (props.allClicks.length === 0) {\n    return (\n      <div>\n        No feedback given\n      </div>\n    )\n  }\n  console.log(props.allClicks)\n  return (\n    <div>\n      button press history: {props.allClicks.join(' ')}\n    </div>\n  )\n}\nconst Button = ({ onClick, text }) => (\n  <button onClick={onClick}>\n    {text}\n  </button>\n)\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [allClicks, setAll] = useState([])\n\n  const handleGoodClick = () => {\n    setAll(allClicks.concat(setGood(good + 1)))\n    setGood(good + 1)\n  }\n\n  const handleNeutralClick = () => {\n    setAll(allClicks.concat(neutral))\n    setNeutral(neutral + 1)\n  }\n\n  const handleBadClick = () => {\n    setAll(allClicks.concat(bad))\n    setBad(bad + 1)\n  }\n  \n  let total = good + neutral + bad;\n  let average = ( good *1 + neutral*0 +bad*-1) / total;\n  let positive = (good / total) * 100\n  return (\n    <div>\n      <div>\n        <h2>Give feedback</h2>\n        \n        <Button onClick={handleGoodClick} text='good' />\n        <Button onClick={handleNeutralClick} text='neutral' />\n        <Button onClick={handleBadClick} text='bad' />\n\n      </div>\n      <div>\n        <h2>statistics</h2>\n        <Statistics allClicks={allClicks} />\n        <p>good {good}  </p>\n        <p>neutral {neutral} </p>\n        <p>bad {bad} </p>\n        <p>all  {total}</p>\n        <p>average  {average} </p>\n        <p>positive  {positive}% </p>\n\n      </div>\n    </div>\n  )\n}\n\nReactDOM.render(<App />, \n  document.getElementById('root')\n)"]},"metadata":{},"sourceType":"module"}